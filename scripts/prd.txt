# Product Requirements Document: Category Wizard

**Version:** 1.0
**Date:** 2025-04-16
**Author:** AI Assistant based on user request

# Feature Name

Category Wizard

# 1. Overview

The Category Wizard is a new feature for the Local Ledger application designed to rapidly categorize multiple uncategorized transactions using AI suggestions. It fetches AI-powered category predictions (including confidence scores and alternatives) for all currently uncategorized transactions and presents them to the user in a dedicated, optimized interface for quick review and approval. The primary goal is to significantly accelerate the categorization workflow, prioritizing **speed and efficiency** while retaining user control. Database updates are batched until the user explicitly saves or completes the wizard session.

# 2. Core Requirements

* **Identify Uncategorized Transactions:**
    * *What it does:* Finds all transactions in the local database that do not currently have an assigned category (`CategoryID` is null or equivalent).
    * *Why it's important:* Provides the pool of transactions that need categorization, forming the input for the wizard.
    * *How it works:* A query is executed against the SQLite database (via `better-sqlite3` in the main process) to retrieve the relevant transaction IDs and descriptions.
* **Fetch AI Category Suggestions (Batch Operation):**
    * *What it does:* For each identified uncategorized transaction, sends the description (and potentially other relevant details like amount if helpful) to the Google Gemini API to retrieve suggested categories. Requests should aim to get a primary suggestion, a confidence score for that suggestion, and one or more alternative suggestions, particularly if confidence is below a certain threshold.
    * *Why it's important:* Leverages AI to automate the suggestion process, forming the core of the wizard's efficiency gain. Confidence scores help guide the user.
    * *How it works:*
        * The main process receives the list of uncategorized transaction descriptions via IPC.
        * It batches these descriptions and sends requests to the Gemini API endpoint configured for categorization. Prompts should be engineered to request the desired output format (primary category, confidence, alternates).
        * Handles API responses, potentially in parallel or batches to improve overall speed.
        * Stores the received suggestions temporarily (e.g., in memory associated with the transaction IDs) before sending back to the renderer process.
* **Rapid Review Interface:**
    * *What it does:* Presents a dedicated view (modal or full screen) where transactions are shown **one by one** for rapid review. Displays transaction details and the AI suggestions with clear interaction methods.
    * *Why it's important:* Provides the optimized UX focused on speed, allowing users to process transactions quickly.
    * *How it works:*
        * A new UI view is triggered by the user.
        * It displays a loading state while suggestions are fetched.
        * Once suggestions are ready, it displays the first transaction:
            * **Left Pane:** Key transaction details (e.g., Date, Description, Amount).
            * **Right Pane:**
                * Primary AI Suggested Category (clearly highlighted).
                * Confidence Score (displayed visually or textually).
                * Alternative AI Suggested Categories (if available, clickable).
                * A searchable dropdown/combobox (`shadcn/ui` Combobox recommended) allowing selection from the user's full list of existing categories.
        * Progress indicator (e.g., "Transaction X of Y") is displayed.
* **Optimized Interaction Model:**
    * *What it does:* Defines keyboard and mouse interactions optimized for speed.
    * *Why it's important:* Critical for achieving the feature's primary goal of rapid categorization.
    * *How it works:*
        * **Pressing `Enter` Key:** Accepts the **primary** AI suggestion, assigns it to the current transaction (in the temporary state), and automatically moves to the next uncategorized transaction.
        * **Clicking an Alternative Suggestion:** Assigns the clicked category to the current transaction (in state) and moves to the next.
        * **Using the Category Selector:** Allows the user to manually search and select any existing category. Selecting a category assigns it (in state) and moves to the next.
        * Navigation (Optional but recommended): Allow simple ways to go back (`ArrowUp`?) or skip (`ArrowDown`?) a transaction if needed.
* **Batched Database Updates:**
    * *What it does:* Collects all user decisions (approved/updated categories) made within the wizard session and updates the database only upon completion or explicit user action.
    * *Why it's important:* Improves performance by reducing numerous small database writes. Ensures data integrity by committing changes together. Aligns with the speed requirement by not blocking UI on individual saves.
    * *How it works:*
        * User decisions (Transaction ID -> Category ID mapping) are stored in the application's state (e.g., Zustand store) as the user progresses through the wizard.
        * A "Save and Exit" button is provided. A "Finish" action occurs upon reviewing the last transaction.
        * Upon triggering Save/Finish, the collected mapping of {TransactionID: CategoryID} is sent via IPC to the main process.
        * The main process executes a batch update operation using `better-sqlite3`. This might involve a loop executing prepared statements or a more sophisticated batch method if available, ideally within a single database transaction for atomicity.

# 3. User Experience (UX)

* **Key User Flow:**
    1.  User clicks a "Categorize with Wizard" button/link (e.g., near the transaction list or in a summary area).
    2.  Wizard view opens, displaying a loading indicator ("Fetching AI suggestions for Y transactions...").
    3.  Once loaded, the first transaction and its suggestions appear.
    4.  User reviews:
        * Presses `Enter` to accept the primary suggestion.
        * Clicks an alternative suggestion.
        * Selects a different category from the combobox.
    5.  The view updates instantly to the next transaction.
    6.  User repeats step 4 until all transactions are reviewed or they choose to exit.
    7.  User clicks "Save and Exit" (or reaches the end).
    8.  A confirmation message appears ("X transactions updated.") and the wizard closes.
* **UI/UX Considerations:**
    * **Prioritize Speed:** Minimize animations, ensure instant feedback on action, pre-fetch data aggressively. The `Enter` key flow must be seamless.
    * **Clarity:** Obvious visual distinction between primary suggestion, alternates, and the manual selection area. Confidence score should be easy to interpret. Transaction details must be legible.
    * **Loading States:** Clear indication when AI suggestions are being fetched. This might take time for many transactions. Consider showing progress if possible (e.g., "Fetched X/Y suggestions...").
    * **Feedback:** Visual confirmation when a category is assigned (briefly). Clear progress tracking (X/Y). Success/error messages upon saving.
    * **User Control:** Always provide the option to manually select any category. Allow exiting the wizard anytime (saving progress made up to that point).
    * **Error Handling:** Gracefully handle Gemini API errors (e.g., rate limits, network issues, invalid key). Provide options like skipping a problematic transaction or retrying the fetch. Handle potential database save errors.

# 4. Technical Considerations

* **API Interaction:**
    * Need robust logic for batching requests to Gemini, respecting potential rate limits.
    * Define clear prompt structures to get category, confidence, and alternates.
    * Implement error handling and potential retries for API calls.
* **State Management (Renderer):**
    * Use Zustand (or chosen state manager) to hold the list of uncategorized items, fetched suggestions, user decisions, and current index/progress.
    * Ensure state updates are efficient and trigger minimal re-renders.
* **Database Interaction (Main):**
    * Implement an efficient batch update function using `better-sqlite3` prepared statements within a transaction.
    * Ensure the query to fetch uncategorized items is performant.
* **IPC Communication:**
    * Define new IPC channels for:
        * Initiating the wizard (requesting uncategorized items).
        * Sending descriptions to main for AI fetching.
        * Receiving AI suggestions back in the renderer.
        * Sending the final batch of {TransactionID: CategoryID} updates to main for saving.
* **Performance:**
    * Fetching AI suggestions is the likely bottleneck. Consider fetching in the background and allowing the user to start reviewing as soon as the *first* suggestion arrives, loading subsequent ones progressively.
    * Ensure the one-by-one transaction view updates extremely quickly.

# 5. Risks and Mitigations

* **Risk: AI Latency:** Fetching suggestions for hundreds/thousands of transactions could be very slow.
    * *Mitigation:* Use batching/parallel requests. Provide clear progress indication. Consider progressive loading (start reviewing before all are fetched). Manage user expectations.
* **Risk: AI Suggestion Quality/Confidence:** Suggestions may be inaccurate, or confidence scores misleading.
    * *Mitigation:* Make manual override extremely fast and easy (`Enter` accepts default, but dropdown is readily available). Display alternates prominently. Do not automatically accept suggestions without user input via the wizard flow.
* **Risk: API Costs and Rate Limits:** High usage could incur significant Gemini costs or hit API limits.
    * *Mitigation:* Make the feature clearly optional. Ensure efficient batching. Potentially add a user-visible counter or warning. Document API usage implications for users providing their own keys.
* **Risk: UI Responsiveness:** Lag during navigation between transactions.
    * *Mitigation:* Optimize React component rendering. Ensure state updates are minimal. Profile UI performance during development.
* **Risk: Batch Update Failure:** Database error occurs while saving the batch.
    * *Mitigation:* Use SQLite transactions. Provide clear error feedback to the user. Potentially store the intended changes temporarily to allow a retry.

# 6. Future Enhancements (Optional Backlog)

* Allow creating new categories directly from the wizard.
* Allow creating categorization rules based on decisions made in the wizard.
* User configurable confidence thresholds for highlighting suggestions.
* Smarter batching or progressive loading of AI suggestions.
* Ability to "skip" a transaction during the wizard review.